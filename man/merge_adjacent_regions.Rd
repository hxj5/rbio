% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/region.R
\name{merge_adjacent_regions}
\alias{merge_adjacent_regions}
\title{Merge Adjacent Regions}
\usage{
merge_adjacent_regions(
  df,
  chrom,
  start,
  end,
  value,
  group = NULL,
  max_gap = 0,
  na.rm = TRUE
)
}
\arguments{
\item{df}{A dataframe.}

\item{chrom}{A string. Name of the column storing chromosome names of the
regions.}

\item{start}{A string. Name of the column storing start positions
(1-based, inclusive) of the regions.}

\item{end}{A string. Name of the column storing end positions
(1-based, inclusive) of the regions.}

\item{value}{A string. Name of the column storing the values of the regions.}

\item{group}{A string. Name of the column storing the group names. Setting
to \code{NULL} to indicate single group.}

\item{max_gap}{An integer. The maximum gap length that is allowed between
two adjacent regions. \code{0} for strict adjacent regions.}

\item{na.rm}{A bool. Whether the regions containing \code{NA} should be removed.}
}
\value{
A dataframe containing columns "\code{chrom}", "\code{start}", "\code{end}",
"\code{value}", and "\code{group}" (if available).
}
\description{
This function is aimed to merge adjacent regions with the same \code{value}s in
each \code{group} (if available). The input regions in each group should be
non-overlapping regions (i.e., the \code{end} position of previous region should
be less or equal to the \code{start} position of current region).
}
\examples{
# single group
df <- data.frame(
  chrom = c("chr1", "chr1", "chr1", "chr2", "chr2"),
  begin = c(1, 101, 201, 101, 201),
  end = c(100, 200, 300, 200, 300),
  value = c(1, 1, 2, 2, 3)
)
merge_adjacent_regions(df, "chrom", "begin", "end", "value")

# more than one groups
tmp1 <- tmp2 <- df
tmp1$group <- "g1"
tmp2$group <- "g2"
df2 <- rbind(tmp1, tmp2)
merge_adjacent_regions(df2, "chrom", "begin", "end", "value", "group")
}
